version: "3.8"

services: 
  server: #first we need nginx server 
    build: #we used customer image to add the conf file source code into the container(we will see if we will use the code later in delployement)
      context: .
      dockerfile: ./dockerfiles/nginx.dockerfile
    ports: 
      - '8000:80'
    volumes:  # in the deployement we won't have the bind mount so it's required to add it in the container
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on: 
      - php
      - mysql
  php: #then we need the php interpreter contains the code 
    build: #add the code into the container and change permision to the base image user
      context: .
      dockerfile: ./dockerfiles/php.dockerfile
    volumes: 
      - ./src:/var/www/laradocker:delegated
  mysql: #we added the env file that contains the credentials for mysql to create then put them in the .env
    image: mysql:5.7
    env_file: 
      - ./env/mysql.env
  composer: #utility container to use composer
    build: #custom image to add the composer entry point and workdir
      context: ./dockerfiles
      dockerfile: composer.dockerfile
    volumes: 
      - ./src:/var/www/laradocker
  
  #artisan: #utility container to user artisan
   #     build: #we need php for it with entry point 
    #      context: .
     #     dockerfile: ./dockerfiles/php.dockerfile
      #  volumes:
       #     - ./src:/var/www/laradocker
        #entrypoint: ['php','/var/www/laradocker/artisan'] #specify the path for the artisan inside laravel
  #npm: #utiliry container to use npm for the frontend
   # image: node
   # working_dir: '/var/www/laradocker'
   # entrypoint: ['npm']
   # volumes: 
   #   - ./src:/var/www/laradocker